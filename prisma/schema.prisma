generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(uuid())
  email         String        @unique
  nick          String        @unique
  name          String
  password      String

  following     Follow[]      @relation("FollowingRelation")
  followers      Follow[]      @relation("FollowersRelation")
  posts         Post[]
  likes         Like[]
  comments      Comment[]
  commentLikes  CommentLike[]  // Relacionamento para likes em comentários

  //avaliationId String
  //avaliation Avaliation @relation(name: "AvaliationToUser", fields: [avaliationId], references: [id])
  reviews       Rating[]

  @@map("users")
  ClubMember ClubMember[]
  BookClub BookClub[] @relation("ClubHost")
}

model Follow {
  id          String @id @default(uuid())
  followerId  String
  followingId String

  follower   User @relation("FollowersRelation", fields: [followerId], references: [id])
  following  User @relation("FollowingRelation", fields: [followingId], references: [id])

  @@map("follows")
}

model Post {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String
  author    User @relation(fields: [authorId], references: [id])
  likes     Like[]
  comments  Comment[] @relation("PostComments")

  @@map("posts")
}

model Like {
  id        String @id @default(uuid())
  userId    String
  postId    String 

  user      User @relation(fields: [userId], references: [id])
  post      Post @relation(fields: [postId], references: [id])

  @@unique([userId, postId])

  @@map("likes")
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String
  author    User @relation(fields: [authorId], references: [id])

  postId    String? // ID do post associado
  post      Post?    @relation("PostComments", fields: [postId], references: [id])

  parentId  String? // Pode referenciar um comentário pai
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies")

  commentLikes CommentLike[] // Relacionamento para likes em comentários

  @@map("comments")
}

model CommentLike {
  id        String @id @default(uuid())
  userId    String // autor da curtida
  commentId String // ID do comentário curtido

  user      User @relation(fields: [userId], references: [id])
  comment   Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId]) // Garantir que um usuário não possa curtir o mesmo comentário mais de uma vez

  @@map("comment_likes")
}

model Book {
  id        String   @id @default(uuid())  // ID único do livro
  title     String  // Título do livro
  author    String?  // Autor do livro
  createdAt DateTime @default(now())  // Data de criação
  updatedAt DateTime @updatedAt  // Data de atualização

  rating   Rating[] // Relacionamento com avaliações
  BookClub BookClub[]

  @@unique([title, author])  // Garante que não existam dois livros com o mesmo título do mesmo autor
  @@map("books")  // Nome da tabela no banco
}

model Rating {
  id        String   @id @default(uuid())  // ID único da avaliação
  rating    Int?      // Nota (de 1 a 5, por exemplo)
  review   String?   // Resenha do livro
  createdAt DateTime @default(now())  // Data de criação da avaliação

  authorId    String   // ID do usuário que fez a avaliação
  author      User     @relation(fields: [authorId], references: [id])  // Relacionamento com o usuário

  bookId    String   // ID do livro avaliado
  book      Book     @relation(fields: [bookId], references: [id])  // Relacionamento com o livro

  @@unique([authorId, bookId])  // Garantir que um usuário não possa avaliar o mesmo livro mais de uma vez
  @@map("ratings")  // Nome da tabela no banco
}


model BookClub {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  hostId      String
  host        User @relation("ClubHost", fields: [hostId], references: [id]) // Relação de quem é o host (criador) do clube


  members     ClubMember[]  // Relacionamento com os membros do clube
  books       Book[]        // Livros associados ao clube

  @@map("book_clubs")
}

model ClubMember {
  id        String @id @default(uuid())
  userId    String
  clubId    String

  user      User     @relation(fields: [userId], references: [id])
  club      BookClub @relation(fields: [clubId], references: [id])

  @@unique([userId, clubId])  // Garantir que um usuário só possa ser membro de um clube uma vez

  @@map("club_members")
}